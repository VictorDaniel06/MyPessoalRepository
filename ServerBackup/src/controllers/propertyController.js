const prisma = require('../lib/prisma');
const { PrismaClient } = require('@prisma/client');

module.exports = {
  // # getAllProperties
  async getAllProperties(req, res) {
    const authenticatedUserId = req.userId;
    console.log(`‚û°Ô∏è Requisi√ß√£o recebida para listar todas as propriedades do usu√°rio: ${authenticatedUserId}`);
    try {
      const properties = await prisma.propriedade.findMany({
        where: { usuarioId: authenticatedUserId }, // FILTRA Pelo usu√°rio logado
        include: {
          usuario: true,
          producoes: {
            select: {
              cultura: true,
              data: true
            },
            orderBy: {
              data: 'desc'
            }
          }
        },
      });

      const propertiesWithAllCultures = properties.map(property => {
        const culturas = property.producoes.map(prod => prod.cultura); 
        const { producoes, ...rest } = property; 
        return { ...rest, culturas }; 
      });

      console.log('‚úÖ Propriedades listadas com sucesso:', propertiesWithAllCultures.length);
      res.status(200).json(propertiesWithAllCultures);
    } catch (error) {
      console.error('‚ùå Erro ao listar propriedades:', error);
      res.status(500).json({ error: 'Ops! Ocorreu um erro ao buscar as propriedades.' });
    }
  },

  // # getPropertyById
  async getPropertyById(req, res) {
    const { nomepropriedade } = req.params;
    const authenticatedUserId = req.userId;
    console.log(`‚û°Ô∏è Requisi√ß√£o recebida para buscar propriedade: "${nomepropriedade}"`);
    try {
      const property = await prisma.propriedade.findFirst({
        where: {
          nomepropriedade: nomepropriedade,
          usuarioId: authenticatedUserId, // GARANTE que a propriedade √© do usu√°rio
        },
        include: {
          usuario: true,
          producoes: {
            select: { cultura: true, data: true },
            orderBy: { data: 'desc' }
          }
        },
      });

      if (!property) {
        console.warn(`‚ö†Ô∏è Propriedade "${nomepropriedade}" n√£o encontrada ou n√£o pertence ao usu√°rio.`);
        return res.status(404).json({ error: `Propriedade "${nomepropriedade}" n√£o encontrada.` });
      }

      const culturas = property.producoes.map(prod => prod.cultura); 
      const { producoes, ...rest } = property; 

      console.log('‚úÖ Propriedade encontrada com sucesso:', property.nomepropriedade);
      res.status(200).json({ ...rest, culturas }); 
    } catch (error) {
      console.error('‚ùå Erro ao buscar propriedade:', error);
      res.status(500).json({ error: 'Ops! Ocorreu um erro ao buscar esta propriedade.' });
    }
  },

  // # createProperty
  async createProperty(req, res) {
    const { nomepropriedade, area_ha, localizacao } = req.body;
    const authenticatedUserId = req.userId; // PEGA O ID DO USU√ÅRIO LOGADO
    console.log('‚û°Ô∏è Requisi√ß√£o recebida para criar uma nova propriedade');
    console.log('üì¶ Dados recebidos:', req.body);

    if (!nomepropriedade || area_ha === undefined || !localizacao) {
      console.warn('‚ö†Ô∏è Campos obrigat√≥rios para criar propriedade ausentes.');
      return res.status(400).json({ error: 'Por favor, preencha todos os campos obrigat√≥rios: nome da propriedade, √°rea em hectares e localiza√ß√£o.' });
    }

    try {
      const existingProperty = await prisma.propriedade.findUnique({ where: { nomepropriedade } });
      if (existingProperty) {
        console.warn(`‚ö†Ô∏è J√° existe uma propriedade com o nome "${nomepropriedade}".`);
        return res.status(400).json({ error: `J√° existe uma propriedade com o nome "${nomepropriedade}". Escolha outro nome.` });
      }

      const newProperty = await prisma.propriedade.create({
        data: {
          nomepropriedade,
          area_ha,
          localizacao,
          usuario: {
            connect: { id: authenticatedUserId }, // CONECTA COM O USU√ÅRIO LOGADO
          },
        },
        include: {
          usuario: true,
          producoes: {
            select: { cultura: true, data: true },
            orderBy: { data: 'desc' }
          }
        },
      });

      const culturas = newProperty.producoes.map(prod => prod.cultura); 
      const { producoes, ...rest } = newProperty;

      console.log('‚úÖ Propriedade criada com sucesso:', newProperty.nomepropriedade);
      res.status(201).json({
        message: 'Propriedade cadastrada com sucesso!',
        property: { ...rest, culturas } 
      });
    } catch (error) {
      console.error('‚ùå Erro ao criar propriedade:', error);
      if (error.code === 'P2025' && error.meta?.cause?.includes('No \'usuario\' record(s)')) {
          console.warn(`‚ö†Ô∏è Usu√°rio autenticado com ID "${authenticatedUserId}" n√£o encontrado no banco.`);
          return res.status(400).json({ error: `O usu√°rio autenticado n√£o foi encontrado.` });
      }
      res.status(500).json({ error: 'Ops! N√£o foi poss√≠vel cadastrar a propriedade. Tente novamente mais tarde.' });
    }
  },

  // # updateProperty
  async updateProperty(req, res) {
    const { nomepropriedade } = req.params;
    const { area_ha, localizacao } = req.body;
    const authenticatedUserId = req.userId;
    console.log(`‚û°Ô∏è Requisi√ß√£o recebida para atualizar propriedade: "${nomepropriedade}"`);
    console.log('üì¶ Dados de atualiza√ß√£o:', req.body);

    try {
      // Verifica se a propriedade existe e pertence ao usu√°rio antes de deletar produ√ß√µes e finan√ßas associadas
      const property = await prisma.propriedade.findFirst({
        where: {
          nomepropriedade,
          usuarioId: authenticatedUserId
        }
      });
      
      if (!property) {
        console.warn(`‚ö†Ô∏è Propriedade "${nomepropriedade}" n√£o encontrada ou n√£o pertence ao usu√°rio para atualiza√ß√£o.`);
        return res.status(404).json({ error: `N√£o foi poss√≠vel encontrar a propriedade "${nomepropriedade}" para atualizar.` });
      }

      const updatedProperty = await prisma.propriedade.update({
        where: {
          nomepropriedade: nomepropriedade,
        },
        data: {
          area_ha,
          localizacao,
        },
        include: {
          usuario: true,
          producoes: {
            select: { cultura: true, data: true },
            orderBy: { data: 'desc' }
          }
        },
      });

      const culturas = updatedProperty.producoes.map(prod => prod.cultura); 
      const { producoes, ...rest } = updatedProperty;

      console.log('üîÑ Propriedade atualizada com sucesso:', updatedProperty.nomepropriedade);
      res.status(200).json({
        message: 'Propriedade atualizada com sucesso!',
        property: { ...rest, culturas } 
      });
    } catch (error) {
      console.error('‚ùå Erro ao atualizar propriedade:', error);
      if (error.code === 'P2025') {
          console.warn(`‚ö†Ô∏è Propriedade "${nomepropriedade}" n√£o encontrada para atualiza√ß√£o.`);
          return res.status(404).json({ error: `N√£o foi poss√≠vel encontrar a propriedade "${nomepropriedade}" para atualizar.` });
      }
      res.status(500).json({ error: 'Ops! Ocorreu um erro ao atualizar a propriedade. Tente novamente.' });
    }
  },

  // # deleteProperty
  async deleteProperty(req, res) {
    const { nomepropriedade } = req.params;
    const authenticatedUserId = req.userId;
    console.log(`‚û°Ô∏è Requisi√ß√£o recebida para deletar propriedade: "${nomepropriedade}"`);
    try {
      // VERIFICA se a propriedade existe e pertence ao usu√°rio antes de deletar
      const property = await prisma.propriedade.findFirst({
        where: {
          nomepropriedade,
          usuarioId: authenticatedUserId
        }
      });
      
      if (!property) {
        console.warn(`‚ö†Ô∏è Propriedade "${nomepropriedade}" n√£o encontrada ou n√£o pertence ao usu√°rio para dele√ß√£o.`);
        return res.status(404).json({ error: `N√£o foi poss√≠vel encontrar a propriedade "${nomepropriedade}" para deletar.` });
      }

      // Deleta em cascata (manualmente, pois o Prisma com SQLite n√£o suporta bem)
      await prisma.financeiro.deleteMany({
        where: { nomepropriedade: nomepropriedade },
      });
      await prisma.producao.deleteMany({
        where: { nomepropriedade: nomepropriedade },
      });
      await prisma.propriedade.delete({
        where: { nomepropriedade: nomepropriedade },
      });

      console.log('üóëÔ∏è Propriedade e dados associados deletados com sucesso:', nomepropriedade);
      res.status(204).send();
    } catch (error) {
      console.error('‚ùå Erro ao deletar propriedade:', error);
      if (error.code === 'P2025') {
        console.warn(`‚ö†Ô∏è Propriedade "${nomepropriedade}" n√£o foi encontrada durante a opera√ß√£o.`);
        return res.status(404).json({ error: `N√£o foi poss√≠vel encontrar a propriedade "${nomepropriedade}" para deletar.` });
      }
      res.status(500).json({ error: 'Ops! Ocorreu um erro ao deletar a propriedade.' });
    }
  },
};